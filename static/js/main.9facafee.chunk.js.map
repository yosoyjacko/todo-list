{"version":3,"sources":["components/TodoForm.jsx","components/Todo.jsx","components/TodoList.jsx","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9facafee.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n  \r\n    const inputRef = useRef(null);\r\n  \r\n    useEffect(() => {\r\n      inputRef.current.focus();\r\n    });\r\n  \r\n    const handleChange = e => {\r\n      setInput(e.target.value);\r\n    };\r\n  \r\n    const handleSubmit = e => {\r\n      e.preventDefault();\r\n  \r\n      props.onSubmit({\r\n        id: Math.floor(Math.random() * 10000),\r\n        text: input\r\n      });\r\n      setInput('');\r\n    };\r\n  \r\n    return (\r\n      <form onSubmit={handleSubmit} className='todo-form'>\r\n        {props.edit ? (\r\n          <>\r\n            <input\r\n              placeholder='actualizar tarea'\r\n              value={input}\r\n              onChange={handleChange}\r\n              name='text'\r\n              ref={inputRef}\r\n              className='todo-input edit'\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button edit'>\r\n              Editar tarea\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <input\r\n              placeholder='agregar tarea'\r\n              value={input}\r\n              onChange={handleChange}\r\n              name='text'\r\n              className='todo-input'\r\n              ref={inputRef}\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button'>\r\n              Agregar tarea\r\n            </button>\r\n          </>\r\n        )}\r\n      </form>\r\n    );\r\n  }\r\n  \r\n  export default TodoForm;","import { useState } from 'react'\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n    const [edit, setEdit] = useState({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  \r\n    const submitUpdate = value => {\r\n      updateTodo(edit.id, value);\r\n      setEdit({\r\n        id: null,\r\n        value: ''\r\n      });\r\n    };\r\n  \r\n    if (edit.id) {\r\n      return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n  \r\n    return todos.map((todo, index) => (\r\n      <div\r\n        className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n        key={index}\r\n      >\r\n        <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n          {todo.text}\r\n        </div>\r\n        <div className='icons'>\r\n          <RiCloseCircleLine\r\n            onClick={() => removeTodo(todo.id)}\r\n            className='delete-icon'\r\n          />\r\n          <TiEdit\r\n            onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n            className='edit-icon'\r\n          />\r\n        </div>\r\n      </div>\r\n    ));\r\n  };\r\n  \r\n  export default Todo;","import { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const addTodo = todo => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n    console.log(...todos);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n  };\r\n\r\n  const removeTodo = id => {\r\n    const removedArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n    setTodos(removedArr);\r\n  };\r\n\r\n  const completeTodo = id => {\r\n    let updatedTodos = todos.map(todo => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Plan para Hoy?</h1>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import Styles from './styles/styles.scss'\nimport TodoList from \"./components/TodoList\";\n\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}